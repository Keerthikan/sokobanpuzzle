--------------------------------------
Running the program
--------------------------------------

To run the A* program from a UNIX command prompt, type:
python sokoban_main.py [OPTIONS] FILENAME

FILENAME specifies the sokoban map file that should be used.  A number of
such map files are included, with various names ending in a ".map" extension.
Some of these files are more difficult to solve than others.

OPTIONS can include any of the following:
-h HEURISTICS:	Specifies a heuristic to use for A* search.  See below.
-max MAX:		Specifies a maximum number of search iterations.  Defaults to
	1,000,000.
-debug ITERS:	Prints debug messages/search statistics every ITERS iterations.
-search:		Run in search mode (default).
-play:			Run in play mode.
-path FILE:		Plays back the path stored in FILE.
-pull:			Allows boxes to be pulled as well as pushed.

There are five heuristic options:
0:	Uses a null heuristic (default).  Returns 0 for all states.
1:	Uses a Manhattan-distance heuristic.
2:	Uses a navigation-distance heuristic.
3:	Uses a cached navigation-distance heuristic.
4:	Uses an optional "other" heuristic.

You can specify more than one heuristic, e.g.:
python sokoban_main.py -h 013 threeboxes.map



-------------------------------------
Input
-------------------------------------

Input to the program is specified as a Sokoban map file.  Several map files
are included and each one contains one Sokoban map, consisting of a grid of
tiles containing obstacles, goals, a player, and boxes the player can move.

The first line of each map file gives the map's height and width.  The following
lines contain a text representation of the map.  Each character represents one
tile, as follows:
(Space) - an empty tile
# - an obstacle
. - a goal
p - the player
8 - the player on a goal
o - a box or object
@ - a box or object on a goal.

When in play mode, the program will display the current map and state while
you specify moves using the 'l', 'r', 'u', and 'd' keys to represent moves in
the left, right, up, and down directions respectively.  You can also reset to
the map's original state (1) or quit (q).

Similarly, when playing back a path file, you can use 'b' and 'f' to move
forward and backward through the recorded path, or you can reset to the
beginning or quit.



------------------------------------
Output
------------------------------------

When A* is done searching, it will print some facts about its search to the
console (including the number of nodes in its search tree and the depth of
the eventual solution), and it will save any solution it found to a path file.
If the specified map file was FILENAME.map, the solution will be saved to
FILENAME.path.

The path file will contain a sequence of moves, specified as 'l', 'r', 'u', and
'd' as above.  You can specify this path file, along with the original map file,
as input back into the program and play back the A* solution to satisfy yourself
that it is optimal.